# Continuum limit


```{r ,include=FALSE}
library(Rose)
library(ggplot2)
library(plotly)
library(knitr)
require(tikzDevice)
df <- data.frame(x = 1:5, y = 1:5)
f1 <- function(df) {
  gg <- ggplot(df, aes(x,y)) + geom_point()
  assign("ggp", plotly::ggplotly(gg), envir=parent.frame())
  #ggp
  df    # NOT returning a plot
}
res1 <- f1(df)
ggp   # Let knit handle the plot
myplotly(ggplot())
```

the result for the continuum extrapolation is:

```{r, results='asis',message=FALSE, warning=FALSE,dev='tikz'}
#| echo: false
source("/home/garofalo/programs/Rose/R/plot_routines.R")
ths<-c("1","2","3","4","5","6","7","8","9","9.5")
dir<-"/home/garofalo/analysis/heavy_quarks/data_Inc/fit_all/"
df<-NULL
for (th in ths){
  namefit<-paste0(dir,"dGamma_th",th,"_const")
  file<-fileA<-paste0(namefit,"_fit_P.dat")
  fit<-read_fit_P_file(file)
  filed<-paste0(namefit,"_fit_data.txt")
  dfq<- read.table(filed, header=FALSE, fill=TRUE)

  tmp<-data.frame("q2"=dfq[1,2], "dG"=fit$P[[2]],"dG_err"=fit$P[[3]] )
  df<-rbind(df,tmp)
}
gg<- myggplot(fill = FALSE)
gg<- gg + geom_pointrange(data=df,aes(x=q2, y=dG,
            ymin=dG-dG_err, ymax=dG+dG_err,
            ) ,size=1.5, stroke=0.3)

fig<-myplotly(gg,"","$q^2[GeV]$", "$24 \\pi^3 d\\Gamma/dq^2 [GeV^-3]$",to_print = TRUE)
dt<-df[,c(1,2)]
dt[,2]<-mapply(mean_print, df[,2],df[,3])

kable(dt,col.names = c("$q^2[GeV]$","$24 \\pi^3 d\\Gamma/dq^2 [GeV^-3]$"))
```

### Correlation 

```{r,echo=FALSE}
namefit_corr<-paste0(dir,"dGamma_const_corr.dat")
df_corr<-read.table(namefit_corr)
kable(df_corr)

tmp<-cbind(names(df_corr),df_corr)

library(reshape2)
melted_df <- melt(tmp)

ggplot(data = melted_df, aes(x=rep(c(1:10),10), y=rep(c(1:10),1, each=10), fill=melted_df[,3])) + 
  geom_tile()+scale_fill_gradient(low="white", high="blue")+theme_bw()
```


## Fits

```{r, results='asis',message=FALSE, warning=FALSE,dev='tikz'}
#| echo: false
source("/home/garofalo/programs/Rose/R/plot_routines.R")

for (th in ths){
  namefit<-paste0(dir,"dGamma_th",th,"_const")
  file<-fileA<-paste0(namefit,"_fit_P.dat")
  fit<-read_fit_P_file(file)
  cat("\n\n")
  dt<-make_table_fit_result(fit)
  print(dt)
  gg<-plot_fit(basename = namefit, "afm",paste0("th",th), width=1e-4,
               id_color = 3, id_shape = 3)
  myplotly(gg, "","$a^2[fm]$",
           paste0("$24 \\pi^3 d\\Gamma/dq^2 [GeV^-3]","(th",th,")$"), to_print = TRUE)
}
```